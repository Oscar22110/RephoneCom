/
//  AdminBD.swift
//  appProductos
//
//  Created by Oscar on 23/10/20.
//  Copyright © 2020 Oscar. All rights reserved.
//

import Foundation
import SQLite3

class AdminBd{
    let dbPath = "myDB.sqlite"
    var db : OpaquePointer?
    
    
    init(){
        db = openDataBase()
        CreateTable()
        CreateTableReportes()
        
        
    }
    func openDataBase() -> OpaquePointer?
    {
        let fileURL = try! FileManager.default.url(for: .documentDirectory, in: .userDomainMask, appropriateFor: nil, create: false).appendingPathComponent(dbPath)
        var db: OpaquePointer? = nil
        if sqlite3_open(fileURL.path, &db) != SQLITE_OK
        {
        print("Error al abir la base de datos")
            return nil
        }
        else{
            print("Base de datos Abierta en \(dbPath)")
            return db
        }
    
    }
    
    //funcionalidad para tabla de producto
    //-------------------------------Creaciòn de tabla usuario--------------------------------------
    func CreateTable(){
        let CreateTable : String = "CREATE TABLE IF NOT EXISTS usuarios(corrUSR TEXT Primary Key, nomUSR TEXT, contraUSR TEXT)"
        var apuntadorTabla : OpaquePointer? = nil
        if sqlite3_prepare_v2(db, CreateTable, -1, &apuntadorTabla, nil) == SQLITE_OK{      //el & esta mandando como referencia,
            if sqlite3_step(apuntadorTabla) == SQLITE_DONE{
                print("Tabla Usuarios creada")
            }
            else{
                print("No se pudo crear la tabla de Usuario")
            }
            
        }
        else{
            print("No se pudo preparar Creacion de Tabla")
        }
        sqlite3_finalize(apuntadorTabla)
        
    }
    //Insert de tabla product
    func InsertUsuario(correoUsuario : String, nombreUsuario : String, contraseñaUsuario : String){
        //Este parametro es                                                              1  2  3
        let sentencia : String = "INSERT INTO  usuarios(corrUSR, nomUSR, contraUSR) VALUES (?, ?, ?)"
        var apuntadorInsert : OpaquePointer? = nil
        if sqlite3_prepare_v2(db, sentencia, -1, &apuntadorInsert, nil) == SQLITE_OK{
            sqlite3_bind_text(apuntadorInsert, 1, (correoUsuario as NSString).utf8String, -1, nil)
            sqlite3_bind_text(apuntadorInsert, 2, (nombreUsuario as NSString).utf8String, -1, nil)
            sqlite3_bind_text(apuntadorInsert, 3, (contraseñaUsuario as NSString).utf8String, -1, nil)
            
            if sqlite3_step(apuntadorInsert) == SQLITE_DONE{
                print("Se inserto el Usuario")
            }
            else{
                print("Error, no se pudo insertar el usuario")
            }
        }
        else{
            print("El insert no se pudo Preparar")
        }
        sqlite3_finalize(apuntadorInsert)
    }
 //------------------Funciòn para actualizar un producto--------------
   
    //----------Funciòn para eliminar un producto-------------------------
   
     //-----------------------------Consulta por ID---------------------------------
    func ConsultaByCorreo(corrUsr : String) -> Usuario {
        let select = "SELECT * FROM usuarios WHERE corrUSR=\(corrUsr);"
        var apuntadorSelect : OpaquePointer? = nil
        var usuario : Usuario
        usuario = Usuario(correoUsuario: "", nombreUsuario: "", contraseñaUsuario: "")
        if sqlite3_prepare_v2(db, select,-1 , &apuntadorSelect, nil) == SQLITE_OK{
            if sqlite3_step(apuntadorSelect) == SQLITE_ROW{
                let corr = String(describing: String(cString: sqlite3_column_text(apuntadorSelect, 0)))
                let nom = String(describing: String(cString: sqlite3_column_text(apuntadorSelect, 1)))
                let contra = String(describing: String(cString: sqlite3_column_text(apuntadorSelect, 2)))
                usuario = Usuario(correoUsuario: corr, nombreUsuario: nom, contraseñaUsuario: contra)
            
            }
        }
        else{
            print("EL Select no se puede preparar")
        }
        sqlite3_finalize(apuntadorSelect)
        return usuario
      
    }
    //------------------------------Consulta Usuarios-----------------------------
    func ConsultaUsuarios() -> Bool {
           let select = "SELECT * FROM usuarios;"
           var apuntadorSelectUsu : OpaquePointer? = nil
           if sqlite3_prepare_v2(db, select,-1 , &apuntadorSelectUsu, nil) == SQLITE_OK{
            if sqlite3_step(apuntadorSelectUsu) == SQLITE_ROW{
                sqlite3_finalize(apuntadorSelectUsu)
                return true
            }else{
                sqlite3_finalize(apuntadorSelectUsu)
                          return false
                }
               
           }
           else{
               print("El select no se pudo preparar")
           }
           sqlite3_finalize(apuntadorSelectUsu)
           return true
       }

    //----------------------------------Tabla Reportes--------------------------------
    func CreateTableReportes(){
           let CreateTable : String = "CREATE TABLE IF NOT EXISTS reportes(IDREPORT TEXT Primary Key, EMPLE TEXT, CALI TEXT, INTEN TEXT, CXQ TEXT, VELO TEXT)"
           var apuntadorTabla : OpaquePointer? = nil
           if sqlite3_prepare_v2(db, CreateTable, -1, &apuntadorTabla, nil) == SQLITE_OK{      //el & esta mandando como referencia,
               if sqlite3_step(apuntadorTabla) == SQLITE_DONE{
                   print("Tabla Reportes creada")
               }
               else{
                   print("No se pudo crear la tabla de Reportes")
               }
               
           }
           else{
               print("No se pudo preparar Creacion de Tabla")
           }
           sqlite3_finalize(apuntadorTabla)
           
       }
    //--------------------------------Consultar reportes--------------------------------
    func ConsultaReportes() -> [Reporte] {
        let select = "SELECT * FROM reportes;"
        var apuntadorSelectReport : OpaquePointer? = nil
        var reportes : [Reporte] = []
        if sqlite3_prepare_v2(db, select,-1 , &apuntadorSelectReport, nil) == SQLITE_OK{
            while sqlite3_step(apuntadorSelectReport) == SQLITE_ROW {
                let num = String(describing: String(cString: sqlite3_column_text(apuntadorSelectReport, 0)))
                let emple = String(describing: String(cString: sqlite3_column_text(apuntadorSelectReport, 1)))
                let cali = String(describing: String(cString: sqlite3_column_text(apuntadorSelectReport, 2)))
                let inten = String(describing: String(cString: sqlite3_column_text(apuntadorSelectReport, 3)))
                let cxq = String(describing: String(cString: sqlite3_column_text(apuntadorSelectReport, 4)))
                let velo = String(describing: String(cString: sqlite3_column_text(apuntadorSelectReport, 5)))
             reportes.append(Reporte(idreporte: num, empleado: emple, calidad: cali, intensidad: inten , cxq: cxq, velocidad: velo))
            }
        }
        else{
            print("El select no se pudo preparar")
        }
        sqlite3_finalize(apuntadorSelectReport)
        return reportes
    }

    //--------------------------------Insertar Reportes---------------------------------
    func InsertReporte(idreporte: String, empleado : String, calidad : String, intensidad: String, cxq: String, velocidad: String){
           //Este parametro es                                                                               1  2  3  4  5  6
        let sentencia : String = "INSERT INTO reportes(IDREPORT, EMPLE, CALI, INTEN, CXQ, VELO) VALUES (?, ?, ?, ?, ?, ?)"
           var apuntadorInsertReport : OpaquePointer? = nil
           if sqlite3_prepare_v2(db, sentencia, -1, &apuntadorInsertReport, nil) == SQLITE_OK{
               sqlite3_bind_text(apuntadorInsertReport, 1, (idreporte as NSString).utf8String, -1, nil)
               sqlite3_bind_text(apuntadorInsertReport, 2, (empleado as NSString).utf8String, -1, nil)
               sqlite3_bind_text(apuntadorInsertReport, 3, (calidad as NSString).utf8String, -1, nil)
               sqlite3_bind_text(apuntadorInsertReport, 4, (intensidad as NSString).utf8String, -1, nil)
               sqlite3_bind_text(apuntadorInsertReport, 5, (cxq as NSString).utf8String, -1, nil)
               sqlite3_bind_text(apuntadorInsertReport, 6, (velocidad as NSString).utf8String, -1, nil)
               
               if sqlite3_step(apuntadorInsertReport) == SQLITE_DONE{
                   print("Se inserto el Reporte")
               }
               else{
                   print("Error, no se pudo insertar el Reporte")
               }
           }
           else{
               print("El insert no se pudo Preparar")
           }
           sqlite3_finalize(apuntadorInsertReport)
       }
    //-------------------------Eliminar reportes-------------------------------
    func EliminarReporte(idreporte: String){
        let sentencia : String = "DELETE FROM reportes WHERE IDREPORT = ?"
        var apuntadorDeleteReport : OpaquePointer? = nil
        if sqlite3_prepare_v2(db, sentencia, -1, &apuntadorDeleteReport, nil) == SQLITE_OK{
            sqlite3_bind_text(apuntadorDeleteReport, 1, (idreporte as NSString).utf8String, -1, nil)
            
            if sqlite3_step(apuntadorDeleteReport) == SQLITE_DONE{
                print("Se Elimino el Reporte")
            }
            else{
                print("El Reporte no se pudo eliminar")
            }
        }
        else{
            print("El Delete no se pudo preparar")
        }
        sqlite3_finalize(apuntadorDeleteReport)
        
    }
    //------------------------Editar reportes-----------------------------------
    func UpdateReportes(idreporte : String, empleado : String, calidad : String, intensidad: String, cxq: String, velocidad: String){
        let sentencia : String = "UPDATE reportes SET EMPLE = ?, CALI = ?, INTEN = ?, CXQ = ?, VELO = ? WHERE IDREPORT = ?"
        var apuntadorUpdateReport : OpaquePointer? = nil
        if sqlite3_prepare_v2(db, sentencia, -1, &apuntadorUpdateReport, nil) == SQLITE_OK{
            sqlite3_bind_text(apuntadorUpdateReport, 1, (empleado as NSString).utf8String, -1, nil)
            sqlite3_bind_text(apuntadorUpdateReport, 2, (calidad as NSString).utf8String, -1, nil)
            sqlite3_bind_text(apuntadorUpdateReport, 3, (intensidad as NSString).utf8String, -1, nil)
            sqlite3_bind_text(apuntadorUpdateReport, 4, (cxq as NSString).utf8String, -1, nil)
            sqlite3_bind_text(apuntadorUpdateReport, 5, (velocidad as NSString).utf8String, -1, nil)
            sqlite3_bind_text(apuntadorUpdateReport, 6, (idreporte as NSString).utf8String, -1, nil)
            
            if sqlite3_step(apuntadorUpdateReport) == SQLITE_DONE{
                print("Se Actualizo el reporte")
            }
            else{
                print("El Update no se pudo preparar")
            }
        }
        else{
            print("El Update no se pudo preparar")
        }
        sqlite3_finalize(apuntadorUpdateReport)
    }
    //----------------------Consultar por ID-----------------------------
    func ConsultaByIdReport(idreporte : String?) -> Reporte {
        let select = "SELECT * FROM reportes WHERE IDREPORT=\(idreporte!);"
        var apuntadorSelectReport : OpaquePointer? = nil
        var reporte : Reporte
        reporte = Reporte(idreporte: "", empleado: "", calidad: "", intensidad: "", cxq: "", velocidad: "")
        if sqlite3_prepare_v2(db, select,-1 , &apuntadorSelectReport, nil) == SQLITE_OK{
            if sqlite3_step(apuntadorSelectReport) == SQLITE_ROW{
                let id = String(describing: String(cString: sqlite3_column_text(apuntadorSelectReport, 0)))
                let emple = String(describing: String(cString: sqlite3_column_text(apuntadorSelectReport, 1)))
                let cali = String(describing: String(cString: sqlite3_column_text(apuntadorSelectReport, 2)))
                let inten = String(describing: String(cString: sqlite3_column_text(apuntadorSelectReport, 3)))
                let cxq = String(describing: String(cString: sqlite3_column_text(apuntadorSelectReport, 4)))
                let velo = String(describing: String(cString: sqlite3_column_text(apuntadorSelectReport, 5)))
                reporte = Reporte(idreporte: id, empleado: emple, calidad: cali, intensidad: inten, cxq: cxq, velocidad: velo)
                
            }
        }
        else{
            print("EL Select no se puede preparar")
        }
        sqlite3_finalize(apuntadorSelectReport)
        return reporte
      
    }
    


}
